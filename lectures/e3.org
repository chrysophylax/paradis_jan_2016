#+STARTUP: overview, hideblocks
#+BEGIN_kv
title: Modules and Functions
subtitle: Lecture E2 
author: Joe Armstrong
copyright: \copyright 2016 -- Joe Armstrong
email: joearms@gmail.com
affiliation: KTH, Whoomph Software AB
process: orgmode_plugin_slides
#+END_kv
* The startup file

** The file {\sl hidden} file \verb+.erlang+ is consulted when you start Erlang.
** This can be in the directory where Erlang was started or your home directory.
** This file can contain any Erlang commands. They are executed when you start Erlang.

* Search Paths

** Code is dynamically loaded at run time.
** \verb+code:get_path()+ tells you want the current path is.
** The first time you call \verb+foo:+ the system will search for a file called \verb+foo.beam+ using the current search path.
** use \verb+code:add_patha(Dir)+ or \verb+code:add_pathz(Dir)+ in your startup file.
   
* Compiling your program

** In the Erlang shell (\verb+> c(FileName).+)
** In the OS command shell (\verb+$erlc foo.erl+).
** From a Makefile.
** from rebar.
   
* Running Erlang from the shell

#+BEGIN_shell
$ erl -pa Path1 -pa Path2 -s M F Arg1 Arg2 ...
#+END_shell

** Can use noshell to stop the prompt

\verb+$erl -noshell ...+

* Running Erlang from a shell script

Create a file \verb+runme+ like this:

\begin{Verbatim}[frame=single]
#!/bin/bash
$ erl -pa Path1 -pa Path2 -s M F $1 ...
\end{Verbatim}

Then run it:

\begin{verbatim}
$ chmod u+x runme
$ runme arg1 ...
\end{verbatim}

* Running Erlang from escript
#+BEGIN_erlang
#!/usr/bin/env escript

main(_) ->
    ...
#+END_erlang
  
** chmod the file then you can run it as a script.

* case expression
#+BEGIN_erlang
area(A) ->
    case A of
       {square, X} ->
           X*X;
       {rectangle, X, Y} ->
           X*Y
       ...
    end
#+END_erlang   

Or:

#+BEGIN_erlang
area({square,X}) -> X*X;
area({rectangle,X,Y}) -> X*Y.
#+END_erlang   

* if expression
#+BEGIN_erlang
weekend(Day) ->
    if
       Day == saturday -> 
          true;
       Day == sunday -> 
          true;
       true ->
          false
    end.
#+END_erlang   
  
** if is an \textcolor{red}{expression} and not an statement.
* Funs
** define own control abstractions:
   
#+BEGIN_erlang
for(Max,Max,F) -> [F(Max)];
for(I, Max, F) -> [F(I) | for(I+1,Max,F)].
#+END_erlang   
   
#+BEGIN_shell
1> D = fun(X) -> 2*X end.
#Fun<erl_eval.6.17052888>
2> hofs:for(1,10,D).
[2,4,6,8,10,12,14,16,18,20]
3> 
#+END_shell

* Simple list recursion
#+BEGIN_erlang
double([]) -> [];
double([H|T]) -> [2*H|double(T)].
#+END_erlang   

#+BEGIN_shell
3> c(math1).
{ok,math1}
4> math1:double([1,2,3,4,5]).
[2,4,6,8,10]
#+END_shell

* Accumulators

#+BEGIN_erlang
sum(L) -> sum_helper(L, 0).

sum_helper([], N) -> N;
sum_helper([H|T], N) ->
    N1 = N + H,
    sum_helper(T, N1).
#+END_erlang   
   
#+BEGIN_shell
1> math1:sum([1,2,3,4,5]).
15
#+END_shell

* sum\_and\_double

** travserses the list twice

#+BEGIN_erlang
sum_and_double(L) ->
    Sum = sum(L),
    Double = double(L),
    {Sum, Double}.

double([]) -> [];
double([H|T]) -> [2*H|double(T)].

sum([]) -> 0;
sum([H|T]) -> H + sum(T).
#+END_erlang   
   
#+BEGIN_shell
8> lists1:sum_and_double([1,2,3,4]). 
{10,[2,4,6,8]}
#+END_shell

* sum\_and\_double1

** traverses the list once -- \textcolor{Red}{gets the answer wrong} 

#+BEGIN_erlang
sum_and_double1(L) -> 
    sum_and_double_helper1(L, [], 0).

sum_and_double_helper1([H|T], L, N) ->
    sum_and_double_helper1(T, [2*H|L], N + H);
sum_and_double_helper1([], L, N) ->
    {N, L}.
#+END_erlang   
   
#+BEGIN_shell
8> lists1:sum_and_double1([1,2,3,4]). 
{10,[8,6,4,2]}
#+END_shell

* sum\_and\_double2

** traverses the list once -- \textcolor{Red}{gets the answer right} 

#+BEGIN_erlang
sum_and_double2(L) -> 
    sum_and_double_helper2(L, [], 0).

sum_and_double_helper2([H|T], L, N) ->
    sum_and_double_helper2(T, [2*H|L], N + H);
sum_and_double_helper2([], L, N) ->
    {N, lists:reverse(L)}.
#+END_erlang   
   
#+BEGIN_shell
8> lists1:sum_and_double2([1,2,3,4]). 
{10,[2,4,6,8]}
#+END_shell
   
* sum\_and\_double3

** Renamed the helper function.
   
#+BEGIN_erlang
sum_and_double3(L) -> 
    sum_and_double3(L, [], 0).

sum_and_double3([H|T], L, N) ->
    sum_and_double3(T, [2*H|L], N + H);
sum_and_double3([], L, N) ->
    {N, lists:reverse(L)}.
#+END_erlang   
   
#+BEGIN_shell
1> lists1:sum_and_double2([1,2,3,4]). 
{10,[2,4,6,8]}
#+END_shell

* Natural order in lists

** Write the code using accumulators.
** Don't bother if the lists come out in the wrong order.
** Reverse the order at the end.
** \verb+lists:reverse+ is a BIF not a function call \textcolor{red}{but it looks like a function call}.
* Tail Recursion
** The last thing you do is call another routine
** really ``last call optimization''

\begin{Verbatim}
function a(){
   call x
   call y
}

call x is compiled as:
  push address of y
  call x

the call to y (a lastcall) is compiled as
  jmp y
\end{Verbatim}

* BIFS
** Do things that are impossible in erlang ( \verb+atom_to_list(abc)+).
** Do things that are slow in erlang ( \verb+lists:reverse/1+).
** Look like erlang function calls

* Apply
  
** \verb+apply(Mod, Func, [Arg1, Arg2, ..., ArgN])+ -- same as \verb+Mod:Func(Arg1, Arg2, ..., ArgN)+

#+BEGIN_shell
1> apply(lists, reverse, [[1,2,3,4]]).
[4,3,2,1]
#+END_shell

* Guards
#+BEGIN_erlang
upcase(X) when $a =< X andalso X =< $z ->
    X -$a + $A;
upcase(X) ->
    X.
#+END_erlang   
   
#+BEGIN_shell
1> c(lists1).
{ok,lists1}
2> lists1:upcase($a).
65
3> $a.
97
#+END_shell

* List Comprehensions
** \verb+[ Expression || Pattern <- List]+

#+BEGIN_shell
1> [lists1:upcase(I) || I <- "hello"].
"HELLO"
2> [{X,Y} || X <- [1,2,3], Y <- [a,b,c]]. 
[{1,a},{1,b},{1,c},
 {2,a},{2,b},{2,c},
 {3,a},{3,b},{3,c}]
#+END_shell

* Tuple programs
** Store tree like data structures in tuple
** XML

The XML \verb+<tag1 a1="abc" a2="def"> ... </tag1>+ can be represented
as \verb+{tag1, [{a1,"abc"},{a2,"def"}], [ ...]}+

#+BEGIN_erlang
path_search([Tag|T],[{Tag,_,Children}|_]) ->
    path_search(T, Children);
...
#+END_erlang

* Records
** What do the elements in a tuple mean?

#+BEGIN_erlang
X = {person,"zabdog","polgelzipper",42,22,....}
#+END_erlang

#+BEGIN_erlang
-record(person,
   {firstname, lastname, footsize, age,
    ....}).

X = #person{age=20, footsize=10}

birthday(X) ->
     Age = X#person.age,
     X#person{age=Age+1}.
#+END_erlang

* Typed Records 1

** We can add types to the fields.
** Can be checked by the dialyzer.
** Informative only:

#+BEGIN_erlang
-record(person,
   {firstname :: string(),
    lastname :: string(),
    footsize :: integer(),
    age :: integer(),
    ....}).
#+END_erlang

** What's wrong with this?
  
* Typed Records 2

#+BEGIN_erlang
-type months() :: integer().

-record(person,
   {firstname :: string(),
    lastname :: string(),
    footsize :: integer(),
    age :: months(),
    ....}).
#+END_erlang
  
* Catch
#+BEGIN_shell
1> X = atom_to_list(1).
** exception error: bad argument
     in function  atom_to_list/1
        called as atom_to_list(1)
2> X.
 1: variable 'X' is unbound
3> X = (catch atom_to_list(1)).
{'EXIT',{badarg,
    [{erlang,atom_to_list,[1],[]},
     {erl_eval,do_apply,6,
       [{file,"erl_eval.erl"},{line,573}]},
          ...
#+END_shell

* Try ... catch, catch .. throw
#+BEGIN_erlang
try F() 
catch
   exit:... ->
   throw:... ->
   error:... ->
after
   ...
end
#+END_erlang
  
* ++  and --\,--

** X \verb|++| Y is an infix notation for \verb+lists:append(X,Y)+
** Takes time \verb+O(length(X)).+

#+BEGIN_shell
> "abc" ++ "123".
"abc123"
> "abc123" -- "abc".
"123"
> "abc123" -- "123".
"abc"
> "abc123xyz" -- "123".
"abcxyz"
> "abc12xyz" -- "123". 
"abcxyz"
#+END_shell
